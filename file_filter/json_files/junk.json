[
  {
    "name": "team not available",
    "size": 100,
    "date": "2025-03-22",
    "content": "The half of the team is not going to be available in the week of March 24th"
  },
  {
    "name": "frontend weekly sync",
    "size": 250,
    "date": "2025-03-20",
    "content": "Discussed upcoming UI changes for the dashboard and feedback from users. Decided to adopt Tailwind CSS for component styling."
  },
  {
    "name": "backend bug triage",
    "size": 180,
    "date": "2025-03-21",
    "content": "Reviewed recent critical bugs in the auth module. Plan: implement rate limiting and improve token validation logic."
  },
  {
    "name": "frontend retro",
    "size": 130,
    "date": "2025-03-18",
    "content": "Team noted the complexity of recent animations. Agreement to prototype with Framer Motion before implementing in production."
  },
  {
    "name": "backend code snippet - auth",
    "size": 220,
    "date": "2025-03-15",
    "content": "def validate_token(token):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n        return payload['user_id']\n    except jwt.ExpiredSignatureError:\n        return None\n    except jwt.InvalidTokenError:\n        return None"
  },
  {
    "name": "backend team planning",
    "size": 160,
    "date": "2025-03-19",
    "content": "Planned rollout of new microservice for invoice processing. Target deployment: March 29. Code freeze set for March 26."
  },
  {
    "name": "backend code snippet - db access",
    "size": 210,
    "date": "2025-03-10",
    "content": "def get_user_by_email(email):\n    conn = get_db_connection()\n    user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()\n    conn.close()\n    return user"
  }
]
