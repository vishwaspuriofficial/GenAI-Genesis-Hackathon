openapi: 3.0.3
info:
  title: Meeting Management API
  description: |
    API for managing meetings, appointments, and file uploads/downloads for the GenAI Genesis Hackathon project.
    
    This API allows users to:
    - Create and manage user accounts
    - Schedule and manage meetings
    - Upload and download files
    - Track appointments
  version: 1.0.0
  contact:
    name: Development Team
servers:
  - url: http://localhost:5001
    description: Local development server
  - url: https://api.example.com
    description: Production server (example)

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Meetings
    description: Meeting management endpoints
  - name: Files
    description: File upload and download endpoints
  - name: Appointments
    description: Appointment tracking endpoints
  - name: System
    description: System status endpoints

paths:
  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
                role:
                  type: string
                  example: user
                  enum: [admin, team, user, product]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user_id:
                    type: string
                    example: abc123def456
        '400':
          description: Bad request - missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and return a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meetings:
    post:
      tags:
        - Meetings
      summary: Create a new meeting
      description: Schedule a new meeting with the provided details.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - date
                - time
                - duration
                - team_agent
                - meeting_link
              properties:
                title:
                  type: string
                  example: Weekly Project Review
                description:
                  type: string
                  example: Discuss project progress and next steps
                date:
                  type: string
                  format: date
                  example: 2023-12-15
                time:
                  type: string
                  example: 15:30
                duration:
                  type: integer
                  example: 60
                team_agent:
                  type: string
                  example: product
                meeting_link:
                  type: string
                  example: https://meet.google.com/abc-defg-hij
      responses:
        '201':
          description: Meeting created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meeting created successfully
                  meeting_id:
                    type: string
                    example: abc123def456
        '400':
          description: Bad request - missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Meetings
      summary: Get user meetings
      description: Get all meetings for the authenticated user based on their role.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter meetings by status
          required: false
          schema:
            type: string
            enum: [pending, approved, rejected, completed]
      responses:
        '200':
          description: List of meetings
          content:
            application/json:
              schema:
                type: object
                properties:
                  meetings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Meeting'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meetings/{meeting_id}:
    get:
      tags:
        - Meetings
      summary: Get meeting details
      description: Get the details of a specific meeting.
      security:
        - bearerAuth: []
      parameters:
        - name: meeting_id
          in: path
          description: ID of the meeting to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Meeting details
          content:
            application/json:
              schema:
                type: object
                properties:
                  meeting:
                    $ref: '#/components/schemas/Meeting'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - user doesn't have permission to view this meeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Meeting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Meetings
      summary: Update meeting
      description: Update the status or response of a meeting.
      security:
        - bearerAuth: []
      parameters:
        - name: meeting_id
          in: path
          description: ID of the meeting to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, approved, rejected, completed]
                  example: approved
                response:
                  type: string
                  example: We will prepare the necessary materials for the meeting
      responses:
        '200':
          description: Meeting updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meeting updated successfully
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - user doesn't have permission to update this meeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Meeting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meetings/{meeting_id}/details:
    get:
      tags:
        - Meetings
      summary: Get meeting details (public)
      description: Get the details of a specific meeting without authentication.
      parameters:
        - name: meeting_id
          in: path
          description: ID of the meeting to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Meeting details
          content:
            application/json:
              schema:
                type: object
                properties:
                  meeting:
                    $ref: '#/components/schemas/Meeting'
        '404':
          description: Meeting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meetings/{meeting_id}/files:
    get:
      tags:
        - Files
        - Meetings
      summary: Get meeting files
      description: Get all files associated with a meeting.
      parameters:
        - name: meeting_id
          in: path
          description: ID of the meeting
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of file URLs
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                          example: presentation.pdf
                        url:
                          type: string
                          example: https://storage.googleapis.com/bucket/path/to/file.pdf
                        uploaded_by:
                          type: string
                          example: john.doe@example.com
                        uploaded_at:
                          type: string
                          example: 2023-12-15 15:30:00
                        team:
                          type: string
                          example: Product
        '404':
          description: Meeting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meetings/attachment/{meeting_id}:
    delete:
      tags:
        - Files
        - Meetings
      summary: Delete a meeting attachment
      description: Delete a file associated with a meeting.
      security:
        - bearerAuth: []
      parameters:
        - name: meeting_id
          in: path
          description: ID of the meeting
          required: true
          schema:
            type: string
        - name: file_url
          in: query
          description: URL of the file to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File deleted successfully
        '400':
          description: File URL is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - user doesn't have permission to delete from this meeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Meeting not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload-file:
    post:
      tags:
        - Files
      summary: Upload a file
      description: Upload a file to Firebase Storage.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                meeting_id:
                  type: string
                  example: abc123def456
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://storage.googleapis.com/bucket/path/to/file.pdf
                  team:
                    type: string
                    example: Product
        '400':
          description: Bad request - missing file or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - user doesn't have permission to upload files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/team-upload:
    post:
      tags:
        - Files
      summary: Upload multiple files for a team
      description: Upload multiple files to a folder named after the user's role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files[]
              properties:
                files[]:
                  type: array
                  items:
                    type: string
                    format: binary
                meeting_id:
                  type: string
                  example: abc123def456
      responses:
        '200':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 3 files uploaded successfully
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                          example: document.pdf
                        url:
                          type: string
                          example: https://storage.googleapis.com/bucket/path/to/file.pdf
                        team:
                          type: string
                          example: Product
                  errors:
                    type: array
                    items:
                      type: string
                    example: []
        '400':
          description: Bad request - missing files or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/simple-upload:
    post:
      tags:
        - Files
      summary: Simple file upload
      description: |
        Simplified endpoint to upload files directly to a folder named after the user's role.
        No meeting associations, just straight to Firebase Storage.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://storage.googleapis.com/bucket/path/to/file.pdf
                  role:
                    type: string
                    example: Product
        '400':
          description: Bad request - missing file or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/files/download:
    get:
      tags:
        - Files
      summary: Download multiple files (GET)
      description: Download multiple files as a ZIP archive using query parameters.
      parameters:
        - name: file_url
          in: query
          description: URL of a file to download (can be repeated for multiple files)
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        '200':
          description: ZIP file containing the requested files
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request - missing file URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Files
      summary: Download multiple files (POST)
      description: Download multiple files as a ZIP archive using a JSON body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file_urls
              properties:
                file_urls:
                  type: array
                  items:
                    type: string
                  example: ["https://storage.googleapis.com/bucket/file1.pdf", "https://storage.googleapis.com/bucket/file2.jpg"]
      responses:
        '200':
          description: ZIP file containing the requested files
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request - missing file URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meeting/earliest:
    get:
      tags:
        - Appointments
      summary: Get earliest meeting
      description: Get the earliest upcoming meeting from the appointment database.
      responses:
        '200':
          description: Earliest meeting details
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointment:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: 2023-12-15 15:30
                      appointment_id:
                        type: string
                        example: abc123def456
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/status:
    get:
      tags:
        - System
      summary: System status
      description: Get the status of the API and Firebase connections.
      responses:
        '200':
          description: System status
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    type: string
                    example: running
                  firebase:
                    type: object
                    properties:
                      storage:
                        type: string
                        example: OK
                      firestore:
                        type: string
                        example: OK
                      mock_mode:
                        type: boolean
                        example: false
                      storage_bucket:
                        type: string
                        example: my-bucket-name
                  upload_folder:
                    type: string
                    example: uploads
                  version:
                    type: string
                    example: 1.0.0
        '207':
          description: Service degradation (mock mode enabled)
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    type: string
                    example: running
                  firebase:
                    type: object
                    properties:
                      storage:
                        type: string
                        example: MOCK
                      firestore:
                        type: string
                        example: MOCK
                      mock_mode:
                        type: boolean
                        example: true
                      storage_bucket:
                        type: string
                        example: my-bucket-name
                  upload_folder:
                    type: string
                    example: uploads
                  version:
                    type: string
                    example: 1.0.0

  /api/update_database:
    post:
      tags:
        - System
      summary: Trigger database update in the AI server
      description: Signal the AI server to update its database with new files
      security:
        - bearerAuth: []
      parameters:
        - name: meeting_id
          in: query
          description: Optional meeting ID to process files for a specific meeting
          required: false
          schema:
            type: string
            example: abc123def456
      responses:
        '200':
          description: Update triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Database update triggered in AI server
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/process_meeting:
    post:
      tags:
        - Meetings
      summary: Process meeting files with AI
      description: Trigger the AI server to process all files associated with a meeting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - meeting_id
              properties:
                meeting_id:
                  type: string
                  example: abc123def456
      responses:
        '200':
          description: Meeting processing triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Meeting processing initiated
        '400':
          description: Bad request - missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/search:
    get:
      tags:
        - Files
      summary: Search document database
      description: Search the AI document database using vector similarity
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: The search query string
          required: true
          schema:
            type: string
            example: project deadlines and milestones
        - name: meeting_id
          in: query
          description: Optional meeting ID to limit search to a specific meeting
          required: false
          schema:
            type: string
            example: abc123def456
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: ProjectMeeting.pdf
                        date:
                          type: string
                          example: 2023-04-15
                        data:
                          type: object
                          properties:
                            content:
                              type: string
                              example: This is the content of the document...
                            summary:
                              type: string
                              example: Meeting about project deadlines and milestones.
                            topics:
                              type: array
                              items:
                                type: string
                              example: ["project", "deadlines", "milestones"]
        '400':
          description: Bad request - missing query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: abc123def456
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        role:
          type: string
          example: user
          enum: [admin, team, user, product]

    Meeting:
      type: object
      properties:
        id:
          type: string
          example: abc123def456
        title:
          type: string
          example: Weekly Project Review
        description:
          type: string
          example: Discuss project progress and next steps
        date:
          type: string
          format: date
          example: 2023-12-15
        time:
          type: string
          example: 15:30
        duration:
          type: integer
          example: 60
        requester_id:
          type: string
          example: user123
        requester_name:
          type: string
          example: John Doe
        requester_role:
          type: string
          example: user
        team_agent:
          type: string
          example: product
        meeting_link:
          type: string
          example: https://meet.google.com/abc-defg-hij
        status:
          type: string
          example: pending
          enum: [pending, approved, rejected, completed]
        created_at:
          type: string
          format: date-time
          example: 2023-12-01T10:30:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-12-01T10:30:00Z
        response:
          type: string
          example: We will prepare the necessary materials for the meeting
        attachments:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: presentation.pdf
              url:
                type: string
                example: https://storage.googleapis.com/bucket/path/to/file.pdf
              uploaded_by:
                type: string
                example: john.doe@example.com
              uploaded_at:
                type: string
                example: 2023-12-15 15:30:00
        response_files:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: response.pdf
              url:
                type: string
                example: https://storage.googleapis.com/bucket/path/to/file.pdf
              uploaded_by:
                type: string
                example: jane.smith@example.com
              uploaded_at:
                type: string
                example: 2023-12-16 10:15:00
              team:
                type: string
                example: Product

    Error:
      type: object
      properties:
        message:
          type: string
          example: Error message
        error:
          type: string
          example: Detailed error description

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 